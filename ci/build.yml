trigger:
- main

stages:
  - stage: Local
    dependsOn: []
    jobs:

      - job: Linux
        timeoutInMinutes: 0
        strategy:
          maxParallel: 0
          matrix:

            Ubuntu2004_gcc9:
              CC: gcc-9
              CXX: g++-9
              OS_IMAGE: 'ubuntu-20.04'
            
            Ubuntu2004_gcc10:
              CC: gcc-10
              CXX: g++-10
              OS_IMAGE: 'ubuntu-20.04'

            Ubuntu2004_clang10:
              CC: clang-10
              CXX: clang++-10
              OS_IMAGE: 'ubuntu-20.04'
            
            Ubuntu2004_clang11:
              CC: clang-11
              CXX: clang++-11
              OS_IMAGE: 'ubuntu-20.04'
            
            Ubuntu2004_clang12:
              CC: clang-12
              CXX: clang++-12
              OS_IMAGE: 'ubuntu-20.04'

        pool:
          vmImage: $(OS_IMAGE)

        variables:
          BUILD_DIRECTORY: $(Build.SourcesDirectory)/build

        steps:
          - task: CmdLine@2
            displayName: 'Install Build Tools'
            inputs:
              script: |
                sudo apt update -y
                sudo apt install -y --no-install-recommends make cmake python3.8 pip ninja-build
                sudo pip install conan
          - task: UsePythonVersion@0
            displayName: 'Set Python3'
            inputs:
              versionSpec: '3.8.x'
              addToPath: true
              architecture: 'x64'
          - task: CmdLine@2
            displayName: 'Install ONNX Runtime'
            inputs:
              script: python scripts/download_onnxruntime.py --platform linux
              workingDirectory: '$(Build.SourcesDirectory)/tiny_inference_server'
          - task: CmdLine@2
            displayName: 'Create Build Folder'
            inputs:
              script: mkdir build
              workingDirectory: $(Build.SourcesDirectory)
          - task: CmdLine@2
            displayName: 'Configure'
            inputs:
              script: cmake -G Ninja -D CMAKE_BUILD_TYPE=$(BUILD_TYPE) ..
              workingDirectory: $(BUILD_DIRECTORY)
          - task: CmdLine@2
            displayName: 'Build'
            inputs:
              script: cmake --build . --config $(BUILD_TYPE)
              workingDirectory: $(BUILD_DIRECTORY)
          - task: CmdLine@2
            displayName: 'Install'
            inputs:
              script: cmake --install . --prefix "$(BUILD_DIRECTORY)/install"
              workingDirectory: $(BUILD_DIRECTORY)
          - task: CmdLine@2
            displayName: 'Unit Test'
            continueOnError: true
            inputs:
              script: 'ctest . --build-config $(BUILD_TYPE) --output-on-failure --timeout 60 -T Test -VV -j10'
              workingDirectory: $(BUILD_DIRECTORY)
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            continueOnError: true
            inputs:
              testResultsFormat: 'cTest'
              testResultsFiles: '$(BUILD_DIRECTORY)/Testing/*/Test.xml'
              testRunTitle: 'Test Results - $(Agent.JobName)'

      - job: Windows
        timeoutInMinutes: 0
        strategy:
          maxParallel: 0
          matrix:
            Windows2019_msvc2019:
              # see: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#visual-studio-enterprise-2019
              MSVC_DEV_ENV: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/VsDevCmd.bat"
              SETUP_BUILD_ENV: 'call "$(MSVC_DEV_ENV)" -arch=amd64 -host_arch=amd64'
              OS_IMAGE: 'windows-2019'

            Windows2022_msvc2022:
              # see: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md#visual-studio-enterprise-2022
              MSVC_DEV_ENV: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat"
              SETUP_BUILD_ENV: 'call "$(MSVC_DEV_ENV)" -arch=amd64 -host_arch=amd64'
              OS_IMAGE: 'windows-2022'

            # Windows2019_mingw8:
            #   CC: C:\ProgramData\Chocolatey\bin\gcc.exe
            #   CXX: C:\ProgramData\Chocolatey\bin\g++.exe
            #   SETUP_BUILD_ENV: 'set PATH=%PATH%;C:\msys64'
            #   OS_IMAGE: 'windows-2019'
            
            # Windows2022_mingw11:
            #   CC: C:\ProgramData\Chocolatey\bin\gcc.exe
            #   CXX: C:\ProgramData\Chocolatey\bin\g++.exe
            #   SETUP_BUILD_ENV: 'set PATH=%PATH%;C:\msys64'
            #   OS_IMAGE: 'windows-2022'

        pool:
          vmImage: $(OS_IMAGE)

        variables:
          BUILD_DIRECTORY: $(Build.SourcesDirectory)/build

        steps:
          - task: CmdLine@2
            displayName: 'Install Build Tools'
            inputs:
              script: |
                choco install --accept-license -y Ninja
                pip install conan
          - task: UsePythonVersion@0
            displayName: 'Set Python3'
            inputs:
              versionSpec: '3.8.x'
              addToPath: true
              architecture: 'x64'
          - task: CmdLine@2
            displayName: 'Install ONNX Runtime'
            inputs:
              script: python scripts/download_onnxruntime.py --platform windows
              workingDirectory: '$(Build.SourcesDirectory)/tiny_inference_server'
          - task: CmdLine@2
            displayName: 'Create Build Folder'
            inputs:
              script: mkdir build
              workingDirectory: $(Build.SourcesDirectory)
          - task: CmdLine@2
            displayName: 'Configure'
            inputs:
              script: |
                $(SETUP_BUILD_ENV)
                cmake -G Ninja -D CMAKE_BUILD_TYPE=$(BUILD_TYPE) ..
              workingDirectory: $(BUILD_DIRECTORY)
          - task: CmdLine@2
            displayName: 'Build'
            inputs:
              script: |
                $(SETUP_BUILD_ENV)
                cmake --build . --config $(BUILD_TYPE)
              workingDirectory: $(BUILD_DIRECTORY)
          - task: CmdLine@2
            displayName: 'Install'
            inputs:
              script: cmake --install . --prefix "$(BUILD_DIRECTORY)/install"
              workingDirectory: $(BUILD_DIRECTORY)
          - task: CmdLine@2
            displayName: 'Unit Test'
            continueOnError: true
            inputs:
              script: ctest . --build-config $(BUILD_TYPE) --output-on-failure --timeout 60 -T Test -VV -j10
              workingDirectory: $(BUILD_DIRECTORY)
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            continueOnError: true
            inputs:
              testResultsFormat: 'cTest'
              testResultsFiles: '$(BUILD_DIRECTORY)/Testing/*/Test.xml'
              testRunTitle: 'Test Results - $(Agent.JobName)'

      - job: MacOS
        timeoutInMinutes: 0
        strategy:
          maxParallel: 0
          matrix:

            MacOS1015_clang12:
              OS_IMAGE: 'macOS-10.15'

            # MacOS1015_gcc9:
            #   CC: gcc-9
            #   CXX: g++-9
            #   OS_IMAGE: 'macOS-10.15'

            # MacOS1015_gcc10:
            #   CC: gcc-10
            #   CXX: g++-10
            #   OS_IMAGE: 'macOS-10.15'

            # MacOS1015_gcc11:
            #   CC: gcc-11
            #   CXX: g++-11
            #   OS_IMAGE: 'macOS-10.15'

            MacOS11_clang13:
              OS_IMAGE: 'macOS-11'

            # MacOS11_gcc9:
            #   CC: gcc-9
            #   CXX: g++-9
            #   OS_IMAGE: 'macOS-11'

            # MacOS11_gcc10:
            #   CC: gcc-10
            #   CXX: g++-10
            #   OS_IMAGE: 'macOS-11'

            # MacOS11_gcc11:
            #   CC: gcc-11
            #   CXX: g++-11
            #   OS_IMAGE: 'macOS-11'

        pool:
          vmImage: $(OS_IMAGE)

        variables:
          BUILD_DIRECTORY: $(Build.SourcesDirectory)/build

        steps:
          - task: CmdLine@2
            displayName: 'Install Build Tools'
            inputs:
              script: |
                brew install ninja
                pip install conan
          - task: UsePythonVersion@0
            displayName: 'Set Python3'
            inputs:
              versionSpec: '3.8.x'
              addToPath: true
              architecture: 'x64'
          - task: CmdLine@2
            displayName: 'Install ONNX Runtime'
            inputs:
              script: python scripts/download_onnxruntime.py --platform macos
              workingDirectory: '$(Build.SourcesDirectory)/tiny_inference_server'
          - task: CmdLine@2
            displayName: 'Create Build Folder'
            inputs:
              script: mkdir build
              workingDirectory: $(Build.SourcesDirectory)
          - task: CmdLine@2
            displayName: 'Configure'
            inputs:
              script: cmake -G Ninja -D CMAKE_BUILD_TYPE=$(BUILD_TYPE) ..
              workingDirectory: $(BUILD_DIRECTORY)
          - task: CmdLine@2
            displayName: 'Build'
            inputs:
              script: cmake --build . --config $(BUILD_TYPE)
              workingDirectory: $(BUILD_DIRECTORY)
          - task: CmdLine@2
            displayName: 'Install'
            inputs:
              script: cmake --install . --prefix "$(BUILD_DIRECTORY)/install"
              workingDirectory: $(BUILD_DIRECTORY)
          - task: CmdLine@2
            displayName: 'Unit Test'
            continueOnError: true
            inputs:
              script: 'ctest . --build-config $(BUILD_TYPE) --output-on-failure --timeout 60 -T Test -VV -j10'
              workingDirectory: $(BUILD_DIRECTORY)
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            continueOnError: true
            inputs:
              testResultsFormat: 'cTest'
              testResultsFiles: '$(BUILD_DIRECTORY)/Testing/*/Test.xml'
              testRunTitle: 'Test Results - $(Agent.JobName)'


  - stage: Container
    dependsOn: []
    jobs:
      - job: Server
        condition: False
        displayName: Tiny Inference Engine - Server
        timeoutInMinutes: 5
        pool:
          vmImage: 'ubuntu-20.04'
        steps:
          # - task: CmdLine@2
          #   displayName: 'Build Unit Test'
          #   continueOnError: true
          #   inputs:
          #     script: docker build -f tiny_inference_server/Dockerfile --rm -t tie_server:latest --target test .
          # - task: CmdLine@2
          #   displayName: 'Run Unit Test'
          #   continueOnError: true
          #   inputs:
          #     script: docker run --rm --name tiny_inference_server_test tie_server:latest
          - task: CmdLine@2
            displayName: 'Build Server'
            inputs:
              script: docker build -f tiny_inference_server/Dockerfile --rm -t tie_server:latest .
          - task: CmdLine@2
            displayName: 'Run & Shutdown Server (kill)'
            inputs:
              script: |
                docker run -d --rm --name tiny_inference_server tie_server:latest
                sleep 10s
                docker kill --signal=SIGKILL tiny_inference_server
          - task: CmdLine@2
            displayName: 'Run & Shutdown Server (graceful)'
            inputs:
              script: |
                docker run -d --rm --name tiny_inference_server tie_server:latest
                sleep 10s
                docker kill --signal=SIGINT tiny_inference_server

      - job: Client
        condition: False
        displayName: Tiny Inference Engine - Client
        timeoutInMinutes: 5
        pool:
          vmImage: 'ubuntu-20.04'
        steps:
          - task: CmdLine@2
            displayName: 'Build Unit Test'
            inputs:
              script: docker build -f tiny_inference_client/Dockerfile --rm -t tie_client:latest --target test .
          - task: CmdLine@2
            displayName: 'Run Unit Test'
            inputs:
              script: docker run --rm --name tiny_inference_client_test tie_client:latest
          - task: CmdLine@2
            displayName: 'Build Client'
            inputs:
              script: docker build -f tiny_inference_client/Dockerfile --rm -t tie_client:latest .

